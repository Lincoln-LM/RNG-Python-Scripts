"""
Efficiently jump ahead in the Mersenne Twister sequence
method is described here: http://peteroupc.github.io/jump.html
and implemented here: https://github.com/bashtage/randomgen/blob/main/randomgen/src/mt19937/
"""
import numpy as np
from poly_jump import *

class JumpableMT:
    """Mersenne Twister with methods for jumping"""
    MAG02 = [0, 0x9908B0DF]
    N = 624
    M = 397
    def __init__(self, seed = None):
        self.state = np.zeros(624, np.uint32)
        self.index = 0
        if seed is None:
            return

        self.state[0] = seed
        for i in range(1, self.N):
            self.state[i] = (0x6C078965 * (self.state[i - 1] ^ (self.state[i - 1] >> 30)) + i) & 0xFFFFFFFF

    def next(self):
        """Generate the next random integer, note that this shuffles as it moves along instead of shuffling at 624"""
        y = ((self.state[self.index] & 0x80000000) | (self.state[(self.index + 1) % self.N] & 0x7FFFFFFF)) & 0xFFFFFFFF
        self.state[self.index] = self.state[(self.index + self.M) % self.N] ^ y >> 1 ^ self.MAG02[y & 1]

        y = self.state[self.index]
        y ^= (y >> 11)
        y ^= ((y << 7) & 0x9D2C5680)
        y ^= ((y << 15) & 0xEFC60000)
        y ^= (y >> 18)
        self.index += 1
        self.index %= self.N

        return y & 0xFFFFFFFF

    def copy_state(self, other_rng):
        """Copy the state of one PRNG to another"""
        self.state = np.copy(other_rng.state)
        self.index = other_rng.index

    def add_state(self, other_rng):
        """XOR the state of this rng by that of another"""
        self.state ^= np.roll(other_rng.state, self.index - other_rng.index)
        # for i in range(self.N):
        #     self.state[(i + self.index) % 624] ^= other_rng.state[(i + other_rng.index) % 624]

    def compare_state(self, other_rng):
        """Compare to another rng to see if they are functionally equal"""
        state = np.copy(self.state)
        cmp_state = np.roll(other_rng.state, self.index - other_rng.index)
        state[self.index] &= 0x80000000
        cmp_state[self.index] &= 0x80000000
        return all(state == cmp_state)

def advance_via_jump(_rng: JumpableMT, jump):
    """Apply polynomial to rng"""
    # as per https://github.com/bashtage/randomgen/blob/main/randomgen/src/mt19937/
    temp = JumpableMT()
    temp.state = [0 for _ in range(624)]

    for i in range(19937 - 1, 0, -1):
        if (jump >> i) & 1:
            break
    if i > 0:
        temp.copy_state(_rng)
        temp.next()
        i -= 1
        for i in range(i, 0, -1):
            if (jump >> i) & 1:
                temp.add_state(_rng)
            temp.next()
        if jump & 1:
            temp.add_state(_rng)
    elif i == 0:
        temp.copy_state(_rng)
    _rng.copy_state(temp)

if __name__ == "__main__":
    rng = JumpableMT(0x12345678)
    comparison_rng = JumpableMT(0x12345678)
    for _ in range(10**6):
        comparison_rng.next()
    # TODO: compute minimal polynomial via berlekamp massey
    # characteristic polynomial can be precomputed (0x
    characteristic_poly = 0x
    # jump polynomial can be precomputed if the jump count is known ahead of time
    advance_via_jump(rng, compute_jump_polynomial(characteristic_poly, 10**6, 19937 * 4, 19937))
    print(rng.compare_state(comparison_rng))
    