"""
Oak's channel prediction
WIP
"""
from rngs import LCRNG

ENCOUNTER_ROUTES = (7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 60, 67, 73, 75, 77, 78, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 106, 107, 108, 113, 117, 119, 120, 121, 122, 123, 124, 126, 145, 146, 147, 151, 152, 153, 154, 155, 156, 176, 177, 178, 179, 181, 217, 237, 238, 239, 242, 243, 250, 251, 252, 253, 279, 315, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 357, 414, 422, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 463, 464, 486, 487, 490, 491, 492, 513)
KANTO_ENCOUNTER_ROUTES = (9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 49, 50, 52, 54, 55, 56, 57, 91, 92, 93, 106, 107, 108, 124, 126, 145, 146, 147, 178, 179, 414, 422, 448, 449, 450, 451, 452, 453, 454, 455, 456, 513)
EXCL = (449, 513, 487, 315, 490, 491, 492, 237, 238, 239, 242, 243, 298, 357)
FLY_EXCL = (151, 152)
# not exact encounter tables, needs fixing
HG_ENCOUNTER_DAT = {7: (19, 109, 41, 20), 9: (16, 163, 19, 161, 162), 10: (10, 163, 16, 167, 11, 12, 164, 17, 168), 11: (21, 19, 41, 39), 12: (21, 19, 41, 39, 118, 119, 129), 13: (16, 43, 69, 44, 63), 14: (16, 43, 69, 81, 63, 54, 55, 129, 60), 15: (19, 21, 198, 58, 20, 228), 16: (17, 164, 93, 63, 58, 64), 17: (56, 19, 21, 20, 22, 57, 118, 119, 129), 18: (21, 195, 100, 20, 22, 125, 118, 119, 129), 19: (96, 19, 81, 97), 20: (72, 195, 73, 129, 211, 369), 21: (30, 33, 17, 164, 187, 195, 113, 72, 73, 129, 211), 22: (30, 33, 17, 164, 187, 195, 188, 113), 23: (30, 33, 17, 164, 187, 195, 113), 25: (22, 88, 218, 89), 26: (88, 22, 89, 218), 27: (19, 21, 84, 77, 22, 60, 61, 129), 28: (69, 48, 191, 43, 63, 70, 49, 118, 119, 129), 29: (16, 48, 69, 43, 49, 63, 17, 70, 118, 119, 129), 30: (84, 20, 28, 77, 195, 85, 72, 73, 129, 170, 90, 171), 31: (84, 195, 20, 77, 28, 72, 73, 129, 170, 90, 171, 370), 32: (114, 77, 232, 78, 215, 84, 85, 60, 61, 129), 33: (16, 163, 161, 19), 34: (16, 167, 10, 19, 163, 11, 60, 61, 129), 35: (16, 167, 10, 19, 69, 11, 163, 60, 61, 129), 36: (69, 194, 19, 179, 187, 41, 72, 195, 73, 129, 211), 37: (187, 41, 19, 21), 38: (96, 19, 63, 132, 72, 73, 129, 98, 222, 99), 39: (32, 29, 96, 63, 16, 163, 132, 193, 54, 55, 129, 60), 40: (32, 29, 16, 163, 58, 234), 41: (16, 167, 234, 163, 58, 17), 42: (19, 20, 81, 83, 241, 128, 209), 43: (19, 20, 81, 83, 241, 128), 44: (56, 179, 21, 41, 180, 118, 119, 129), 45: (180, 203, 17, 164, 179, 48, 129, 60), 46: (114, 70, 69, 108, 60, 61, 129, 223), 47: (74, 75, 207, 231, 129, 60), 48: (74, 21, 19), 49: (72, 73, 129, 170, 90, 171), 50: (60, 61, 129), 52: (118, 119, 129), 54: (72, 73, 129, 170, 90, 171, 278), 55: (88, 89), 56: (129, 130), 57: (72, 73, 129, 170, 90, 171), 60: (72, 73, 129, 170, 90, 171), 67: (72, 73, 129, 98, 222, 99), 73: (60, 61, 129, 340), 75: (72, 73, 129, 98, 222, 99), 77: (72, 73, 129, 98, 222, 99), 78: (60, 61, 129), 88: (129, 130), 89: (129, 60), 90: (114, 77, 232, 78, 84, 215, 85, 61, 60, 129), 91: (72, 73, 129, 98, 222, 99, 366), 92: (72, 73, 129, 170, 90, 171), 93: (114, 122, 72, 73, 129, 170, 90, 171), 94: (72, 73, 129, 98, 222, 99), 95: (72, 73, 226, 129, 170, 90, 171), 96: (10, 163, 11, 191, 16), 99: (74, 27, 41, 19, 95, 194, 195, 129, 118, 119), 106: (50, 51), 107: (41, 74, 27, 46, 28, 35), 108: (104, 74, 66, 41, 67), 113: (177, 235, 194, 195, 129, 60), 117: (10, 43, 11, 41, 46, 54, 55, 129, 60), 119: (41, 66, 19, 74, 183, 118, 119, 129), 120: (220, 42, 41, 124), 121: (98, 41, 86, 42, 72, 116, 73, 129, 99, 117), 122: (95, 232, 231, 75, 42, 246, 119, 118, 129, 130), 123: (74, 41, 75, 202, 42, 129, 118, 119), 124: (75, 42, 232, 95, 111), 126: (41, 20, 42, 79, 19, 118, 119, 129), 145: (67, 42, 47, 57, 82, 132, 101, 202, 54, 55, 129, 60, 118, 61, 130), 146: (41, 42, 54, 55), 147: (10, 163, 11, 16, 12, 164, 17, 25), 151: (83, 164, 241, 132, 44, 21, 22, 20, 72, 86, 120, 129, 170, 90, 73, 171), 152: (83, 58, 128, 187, 22, 44, 203, 50), 153: (74, 27, 41, 95, 19, 194, 195, 129, 118, 119), 154: (41, 20, 42, 74, 19, 95, 72, 195, 73, 129, 98, 222, 99), 155: (19, 92), 156: (19, 92), 176: (74, 41, 206, 129, 118, 119), 177: (41, 79, 129, 118, 119), 178: (75, 42, 232, 95, 111), 179: (75, 42, 232, 95, 111), 181: (41, 79, 42, 80, 129, 118, 119), 217: (19, 109, 126, 41), 237: (220, 42, 41, 124), 238: (220, 42, 41, 124), 239: (220, 42, 41, 124), 242: (98, 41, 86, 42), 243: (98, 41, 86, 42, 116, 73, 117, 129, 99), 250: (74, 66, 19, 41), 251: (75, 67, 74, 20, 66, 42, 118, 119, 129), 252: (41, 19, 66, 74, 20, 118, 119, 129), 253: (129, 147, 148), 279: (194, 195, 129, 60), 315: (201,), 332: (19, 92), 333: (19, 92), 334: (19, 92), 335: (19, 92), 336: (19, 92), 337: (19, 92), 338: (19, 92), 339: (19, 92), 341: (19, 92), 342: (42, 74, 98, 99, 66, 95, 194, 41, 195, 200, 75, 67, 208), 357: (19, 129, 118), 414: (10, 163, 16, 167, 11, 12, 164, 17, 168), 422: (88, 22, 198, 218, 89), 448: (41, 74, 27, 46, 28, 35), 449: (60, 129), 450: (64, 47, 42, 67, 82, 132, 101, 202, 54, 55, 129, 60, 118, 61, 130), 451: (64, 47, 42, 67, 82, 132, 101, 202, 54, 55, 129, 60, 118, 61, 130), 452: (104, 74, 95, 41, 105, 115), 453: (86, 42, 54, 55, 41), 454: (86, 42, 54, 55, 41), 455: (87, 42, 54, 86, 55, 41), 456: (87, 42, 54, 86, 124, 55, 116, 80, 129, 98, 130, 99, 117), 459: (215, 55, 195, 200, 232, 246, 42, 119, 118, 129), 460: (42, 95, 231, 232, 55, 246), 461: (195, 200, 55, 231, 232, 247, 42, 246), 462: (195, 208, 55, 232, 200, 42, 246, 119, 118, 129), 463: (195, 215, 231, 55, 232, 200, 42, 246, 119, 118, 129), 464: (215, 55, 195, 232, 200, 42, 246, 119, 118, 129), 486: (98, 41, 86, 42), 487: (10,), 490: (201,), 491: (201,), 492: (201,), 513: (60, 129)}
SS_ENCOUNTER_DAT = {7: (19, 109, 41, 20), 9: (16, 163, 19, 161, 162), 10: (165, 13, 163, 16, 14, 15, 164, 166, 17), 11: (21, 19, 41, 23, 39, 24), 12: (21, 19, 41, 23, 39, 24, 129, 118, 119), 13: (16, 43, 69, 52, 44, 63), 14: (16, 43, 69, 52, 81, 63, 129, 60, 55, 54), 15: (52, 21, 198, 37, 20, 53, 19, 228), 16: (52, 17, 93, 63, 37, 164, 64), 17: (19, 21, 20, 22, 129, 118, 119), 18: (21, 195, 100, 20, 22, 125, 129, 118, 119), 19: (96, 19, 81, 97), 20: (129, 72, 211, 73, 195), 21: (33, 30, 17, 164, 187, 195, 113, 129, 72, 211, 73), 22: (33, 30, 17, 164, 187, 195, 188, 113), 23: (33, 30, 17, 164, 187, 195, 113), 25: (22, 88, 218, 89), 26: (88, 22, 89, 218), 27: (19, 21, 84, 77, 22, 129, 60, 61), 28: (69, 48, 191, 43, 63, 70, 49, 129, 118, 119), 29: (16, 48, 69, 43, 49, 63, 17, 70, 129, 118, 119), 30: (84, 20, 77, 195, 24, 129, 170, 72, 90, 73, 171), 31: (84, 195, 24, 20, 77, 85, 129, 170, 72, 90, 73, 171), 32: (114, 77, 217, 78, 215, 84, 85, 129, 60, 61), 33: (16, 163, 161, 19), 34: (165, 16, 163, 13, 19, 14, 129, 60, 61), 35: (165, 16, 163, 13, 19, 69, 14, 129, 60, 61), 36: (69, 194, 23, 179, 187, 19, 41, 129, 72, 211, 73, 195), 37: (187, 41, 23, 21, 19), 38: (96, 19, 63, 132, 129, 98, 222, 99, 73, 72), 39: (29, 32, 96, 63, 16, 163, 132, 193, 129, 60, 55, 54), 40: (29, 32, 16, 163, 37, 234), 41: (165, 16, 163, 234, 37, 17), 42: (52, 20, 83, 81, 241, 128, 209), 43: (52, 20, 83, 81, 241, 128), 44: (179, 21, 41, 180, 129, 118, 119), 45: (180, 203, 17, 164, 179, 48, 129, 60), 46: (114, 70, 69, 108, 129, 60, 223, 61), 47: (74, 75, 216, 227, 129, 60), 48: (74, 21, 19), 49: (129, 170, 72, 90, 73, 171), 50: (129, 60, 61), 52: (129, 118, 119), 54: (129, 170, 72, 90, 73, 171), 55: (89, 88), 56: (129, 130), 57: (129, 170, 72, 90, 73, 171), 60: (129, 170, 72, 90, 73, 171), 67: (129, 98, 222, 99, 73, 72), 73: (129, 60, 61), 75: (129, 98, 222, 99, 73, 72), 77: (129, 98, 222, 99, 73, 72), 78: (129, 60, 61), 88: (129, 130), 89: (129, 60), 90: (114, 77, 217, 78, 84, 215, 85, 129, 60, 61), 91: (129, 98, 222, 99, 73, 72), 92: (129, 170, 72, 90, 73, 171), 93: (114, 122, 129, 170, 72, 90, 73, 171), 94: (129, 98, 222, 99, 73, 72), 95: (129, 170, 72, 90, 73, 171), 96: (13, 163, 14, 191, 16), 99: (74, 19, 41, 95, 129, 118, 119, 195, 194), 106: (50, 51), 107: (41, 74, 46, 35), 108: (104, 74, 66, 41, 67), 113: (177, 235, 129, 60, 195, 194), 117: (13, 43, 14, 41, 46, 129, 60, 55, 54), 119: (41, 66, 19, 74, 183, 129, 118, 119), 120: (220, 42, 225, 41, 124), 121: (98, 41, 86, 42, 129, 116, 99, 117, 73, 72), 122: (95, 217, 216, 75, 42, 246, 129, 130, 118, 119), 123: (74, 41, 75, 202, 42, 129, 118, 119), 124: (75, 42, 217, 95, 111), 126: (41, 20, 42, 79, 19, 129, 118, 119), 145: (67, 42, 47, 53, 82, 132, 101, 202, 129, 60, 118, 61, 130, 55, 54), 146: (41, 42, 54, 55), 147: (13, 163, 14, 16, 15, 164, 17, 25), 151: (83, 164, 241, 132, 44, 21, 22, 20, 129, 170, 72, 90, 73, 171, 120, 86), 152: (83, 37, 128, 187, 22, 44, 203, 50), 153: (74, 19, 41, 95, 129, 118, 119, 195, 194), 154: (41, 20, 42, 74, 19, 95, 129, 98, 222, 99, 73, 195, 72), 155: (19, 92), 156: (19, 92), 176: (74, 41, 206, 129, 118, 119), 177: (41, 79, 129, 118, 119), 178: (75, 42, 217, 95, 111), 179: (75, 42, 217, 95, 111), 181: (41, 79, 42, 129, 118, 119, 80), 217: (19, 109, 126, 41), 237: (220, 42, 225, 41, 124), 238: (220, 42, 225, 41, 124), 239: (220, 42, 225, 41, 124), 242: (98, 41, 86, 42), 243: (98, 41, 86, 42, 129, 116, 99, 117, 73), 250: (74, 66, 19, 41), 251: (75, 67, 74, 20, 66, 42, 129, 118, 119), 252: (41, 19, 66, 74, 20, 129, 118, 119), 253: (129, 147, 148), 279: (129, 60, 195, 194), 315: (201,), 332: (19, 92), 333: (19, 92), 334: (19, 92), 335: (19, 92), 336: (19, 92), 337: (19, 92), 338: (19, 92), 339: (19, 92), 341: (19, 92), 342: (42, 74, 98, 99, 66, 95, 194, 41, 195, 200, 75, 67, 208), 357: (19, 118, 129), 414: (165, 13, 163, 16, 14, 15, 164, 166, 17), 422: (88, 22, 198, 218, 89), 448: (41, 74, 46, 35), 449: (129, 60), 450: (64, 47, 42, 67, 82, 132, 101, 202, 129, 60, 118, 61, 130, 55, 54), 451: (64, 47, 42, 67, 82, 132, 101, 202, 129, 60, 118, 61, 130, 55, 54), 452: (104, 74, 95, 41, 105, 115), 453: (86, 42, 54, 55, 41), 454: (86, 42, 54, 55, 41), 455: (87, 42, 54, 86, 55, 41), 456: (87, 42, 54, 86, 124, 55, 129, 130, 116, 98, 99, 117, 80), 459: (215, 55, 195, 200, 217, 246, 42, 129, 118, 119), 460: (42, 95, 216, 217, 55, 246), 461: (195, 200, 55, 216, 217, 247, 42, 246), 462: (195, 208, 55, 217, 200, 42, 246, 129, 118, 119), 463: (195, 215, 216, 55, 217, 200, 42, 246, 129, 118, 119), 464: (215, 55, 195, 217, 200, 42, 246, 129, 118, 119), 486: (98, 41, 86, 42), 487: (13,), 490: (201,), 491: (201,), 492: (201,), 513: (60, 129)}
LOC_TO_MAP = (0, 0, 0, 0, 0, 0, 230, 206, 209, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 126, 126, 126, 126, 126, 126, 126, 127, 127, 127, 127, 127, 127, 128, 129, 130, 131, 132, 133, 133, 133, 133, 6, 133, 133, 133, 133, 134, 135, 136, 137, 167, 168, 169, 188, 189, 207, 179, 180, 210, 129, 183, 183, 184, 184, 6, 197, 198, 200, 55, 204, 205, 208, 209, 211, 212, 134, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 178, 133, 133, 133, 133, 190, 134, 177, 128, 129, 131, 132, 130, 134, 136, 191, 178, 127, 199, 203, 224, 201, 184, 225, 195, 196, 210, 210, 204, 204, 128, 128, 128, 128, 6, 128, 129, 129, 129, 129, 128, 129, 180, 180, 182, 186, 227, 227, 6, 220, 211, 221, 221, 129, 211, 131, 131, 131, 131, 208, 208, 208, 208, 208, 131, 131, 131, 131, 131, 131, 131, 131, 215, 131, 131, 131, 131, 131, 131, 131, 118, 131, 131, 131, 131, 131, 131, 187, 187, 133, 206, 209, 131, 212, 212, 212, 212, 212, 212, 132, 132, 132, 132, 132, 132, 130, 130, 130, 130, 130, 217, 217, 217, 132, 130, 218, 218, 218, 191, 134, 213, 213, 213, 216, 216, 216, 222, 81, 81, 81, 81, 81, 81, 81, 81, 81, 111, 111, 80, 80, 80, 80, 80, 80, 80, 112, 112, 80, 113, 116, 114, 115, 234, 225, 225, 225, 225, 225, 225, 225, 225, 222, 136, 136, 136, 136, 136, 135, 135, 174, 174, 223, 174, 15, 15, 15, 15, 15, 15, 15, 226, 226, 226, 226, 226, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 175, 209, 209, 209, 209, 209, 226, 226, 132, 182, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 228, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 143, 143, 143, 143, 143, 143, 143, 143, 188, 132, 134, 136, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 126, 130, 143, 143, 158, 154, 156, 153, 163, 144, 144, 144, 134, 134, 148, 148, 148, 148, 148, 121, 148, 148, 148, 148, 148, 148, 148, 229, 118, 118, 150, 164, 168, 150, 150, 150, 150, 164, 164, 166, 167, 159, 141, 141, 141, 141, 141, 141, 141, 142, 142, 142, 142, 142, 142, 142, 173, 131, 144, 144, 144, 148, 212, 208, 198, 198, 199, 199, 200, 203, 203, 203, 203, 203, 203, 219, 219, 219, 219, 219, 219, 219, 158, 201, 153, 153, 154, 140, 140, 140, 140, 140, 140, 140, 145, 55, 145, 145, 145, 145, 158, 145, 218, 207, 207, 201, 209, 209, 209, 155, 142, 141, 139, 139, 139, 139, 139, 139, 139, 138, 138, 138, 138, 138, 146, 146, 176, 151, 151, 198, 137, 137, 0, 153, 198, 131, 148, 231, 231, 231, 232, 232, 232, 149, 229, 229, 229, 229, 153, 160, 227, 227, 131, 144, 0, 15)
MAP_NAMES = ('Mystery Zone', 'Twinleaf Town', 'Sandgem Town', 'Floaroma Town', 'Solaceon Town', 'Celestic Town', 'Jubilife City', 'Canalave City', 'Oreburgh City', 'Eterna City', 'Hearthome City', 'Pastoria City', 'Veilstone City', 'Sunyshore City', 'Snowpoint City', 'PokΘmon League', 'Route 201', 'Route 202', 'Route 203', 'Route 204', 'Route 205', 'Route 206', 'Route 207', 'Route 208', 'Route 209', 'Route 210', 'Route 211', 'Route 212', 'Route 213', 'Route 214', 'Route 215', 'Route 216', 'Route 217', 'Route 218', 'Route 219', 'Route 220', 'Route 221', 'Route 222', 'Route 223', 'Route 224', 'Route 225', 'Route 226', 'Route 227', 'Route 228', 'Route 229', 'Route 230', 'Oreburgh Mine', 'Valley Windworks', 'Eterna Forest', 'Fuego Ironworks', 'Mt. Coronet', 'Spear Pillar', 'Great Marsh', 'Solaceon Ruins', 'Victory Road', 'Pal Park', 'Amity Square', 'Ravaged Path', 'Floaroma Meadow', 'Oreburgh Gate', 'Fullmoon Island', 'Sendoff Spring', 'Turnback Cave', 'Flower Paradise', 'Snowpoint Temple', 'Wayward Cave', 'Ruin Maniac Cave', 'Maniac Tunnel', 'Trophy Garden', 'Iron Island', 'Old Chateau', 'Galactic HQ', 'Verity Lakefront', 'Valor Lakefront', 'Acuity Lakefront', 'Spring Path', 'Lake Verity', 'Lake Valor', 'Lake Acuity', 'Newmoon Island', 'Battle Tower', 'Fight Area', 'Survival Area', 'Resort Area', 'Stark Mountain', 'Seabreak Path', 'Hall of Origin', 'Verity Cavern', 'Valor Cavern', 'Acuity Cavern', 'Jubilife TV', 'PokΘtch Co.', 'GTS', 'TrainersÆ School', 'Mining Museum', 'Flower Shop', 'Cycle Shop', 'Contest Hall', 'Poffin House', 'Foreign Building', 'PokΘmon Day Care', 'Veilstone Store', 'Game Corner', 'Canalave Library', 'Vista Lighthouse', 'Sunyshore Market', 'PokΘmon Mansion', 'Footstep House', 'CafΘ', 'Grand Lake', 'Restaurant', 'Battle Park', 'Battle Frontier', 'Battle Factory', 'Battle Castle', 'Battle Arcade', 'Battle Hall', 'Distortion World', 'Global Terminal', 'Villa', 'Battleground', 'ROTOMÆs Room', 'T.G. Eterna Bldg', 'Iron Ruins', 'Iceberg Ruins', 'Rock Peak Ruins', 'New Bark Town', 'Cherrygrove City', 'Violet City', 'Azalea Town', 'Cianwood City', 'Goldenrod City', 'Olivine City', 'Ecruteak City', 'Mahogany Town', 'Lake of Rage', 'Blackthorn City', 'Mt. Silver', 'Pallet Town', 'Viridian City', 'Pewter City', 'Cerulean City', 'Lavender Town', 'Vermilion City', 'Celadon City', 'Fuchsia City', 'Cinnabar Island', 'Indigo Plateau', 'Saffron City', 'Route 1', 'Route 2', 'Route 3', 'Route 4', 'Route 5', 'Route 6', 'Route 7', 'Route 8', 'Route 9', 'Route 10', 'Route 11', 'Route 12', 'Route 13', 'Route 14', 'Route 15', 'Route 16', 'Route 17', 'Route 18', 'Route 19', 'Route 20', 'Route 21', 'Route 22', 'Route 23', 'Route 24', 'Route 25', 'Route 26', 'Route 27', 'Route 28', 'Route 29', 'Route 30', 'Route 31', 'Route 32', 'Route 33', 'Route 34', 'Route 35', 'Route 36', 'Route 37', 'Route 38', 'Route 39', 'Route 40', 'Route 41', 'Route 42', 'Route 43', 'Route 44', 'Route 45', 'Route 46', 'Route 47', 'Route 48', 'DIGLETTÆs Cave', 'Mt. Moon', 'Cerulean Cave', 'Rock Tunnel', 'Power Plant', 'Safari Zone', 'Seafoam Islands', 'Sprout Tower', 'Bell Tower', 'Burned Tower', 'National Park', 'Radio Tower', 'Ruins of Alph', 'Union Cave', 'SLOWPOKE Well', 'Lighthouse', 'Team Rocket HQ', 'Ilex Forest', 'Goldenrod Tunnel', 'Mt. Mortar', 'Ice Path', 'Whirl Islands', 'Mt. Silver Cave', 'Dark Cave', 'Victory Road', 'DragonÆs Den', 'Tohjo Falls', 'Viridian Forest', 'PokΘathlon Dome', 'S.S. Aqua', 'Safari Zone Gate', 'Cliff Cave', 'Frontier Access', 'Bellchime Trail', 'Sinjoh Ruins', 'Embedded Tower', 'PokΘwalker', 'Cliff Edge Gate')
SPECIES_NAMES = ('Egg', 'Bulbasaur', 'Ivysaur', 'Venusaur', 'Charmander', 'Charmeleon', 'Charizard', 'Squirtle', 'Wartortle', 'Blastoise', 'Caterpie', 'Metapod', 'Butterfree', 'Weedle', 'Kakuna', 'Beedrill', 'Pidgey', 'Pidgeotto', 'Pidgeot', 'Rattata', 'Raticate', 'Spearow', 'Fearow', 'Ekans', 'Arbok', 'Pikachu', 'Raichu', 'Sandshrew', 'Sandslash', 'NidoranF', 'Nidorina', 'Nidoqueen', 'NidoranM', 'Nidorino', 'Nidoking', 'Clefairy', 'Clefable', 'Vulpix', 'Ninetales', 'Jigglypuff', 'Wigglytuff', 'Zubat', 'Golbat', 'Oddish', 'Gloom', 'Vileplume', 'Paras', 'Parasect', 'Venonat', 'Venomoth', 'Diglett', 'Dugtrio', 'Meowth', 'Persian', 'Psyduck', 'Golduck', 'Mankey', 'Primeape', 'Growlithe', 'Arcanine', 'Poliwag', 'Poliwhirl', 'Poliwrath', 'Abra', 'Kadabra', 'Alakazam', 'Machop', 'Machoke', 'Machamp', 'Bellsprout', 'Weepinbell', 'Victreebel', 'Tentacool', 'Tentacruel', 'Geodude', 'Graveler', 'Golem', 'Ponyta', 'Rapidash', 'Slowpoke', 'Slowbro', 'Magnemite', 'Magneton', 'FarfetchÆd', 'Doduo', 'Dodrio', 'Seel', 'Dewgong', 'Grimer', 'Muk', 'Shellder', 'Cloyster', 'Gastly', 'Haunter', 'Gengar', 'Onix', 'Drowzee', 'Hypno', 'Krabby', 'Kingler', 'Voltorb', 'Electrode', 'Exeggcute', 'Exeggutor', 'Cubone', 'Marowak', 'Hitmonlee', 'Hitmonchan', 'Lickitung', 'Koffing', 'Weezing', 'Rhyhorn', 'Rhydon', 'Chansey', 'Tangela', 'Kangaskhan', 'Horsea', 'Seadra', 'Goldeen', 'Seaking', 'Staryu', 'Starmie', 'Mr. Mime', 'Scyther', 'Jynx', 'Electabuzz', 'Magmar', 'Pinsir', 'Tauros', 'Magikarp', 'Gyarados', 'Lapras', 'Ditto', 'Eevee', 'Vaporeon', 'Jolteon', 'Flareon', 'Porygon', 'Omanyte', 'Omastar', 'Kabuto', 'Kabutops', 'Aerodactyl', 'Snorlax', 'Articuno', 'Zapdos', 'Moltres', 'Dratini', 'Dragonair', 'Dragonite', 'Mewtwo', 'Mew', 'Chikorita', 'Bayleef', 'Meganium', 'Cyndaquil', 'Quilava', 'Typhlosion', 'Totodile', 'Croconaw', 'Feraligatr', 'Sentret', 'Furret', 'Hoothoot', 'Noctowl', 'Ledyba', 'Ledian', 'Spinarak', 'Ariados', 'Crobat', 'Chinchou', 'Lanturn', 'Pichu', 'Cleffa', 'Igglybuff', 'Togepi', 'Togetic', 'Natu', 'Xatu', 'Mareep', 'Flaaffy', 'Ampharos', 'Bellossom', 'Marill', 'Azumarill', 'Sudowoodo', 'Politoed', 'Hoppip', 'Skiploom', 'Jumpluff', 'Aipom', 'Sunkern', 'Sunflora', 'Yanma', 'Wooper', 'Quagsire', 'Espeon', 'Umbreon', 'Murkrow', 'Slowking', 'Misdreavus', 'Unown', 'Wobbuffet', 'Girafarig', 'Pineco', 'Forretress', 'Dunsparce', 'Gligar', 'Steelix', 'Snubbull', 'Granbull', 'Qwilfish', 'Scizor', 'Shuckle', 'Heracross', 'Sneasel', 'Teddiursa', 'Ursaring', 'Slugma', 'Magcargo', 'Swinub', 'Piloswine', 'Corsola', 'Remoraid', 'Octillery', 'Delibird', 'Mantine', 'Skarmory', 'Houndour', 'Houndoom', 'Kingdra', 'Phanpy', 'Donphan', 'Porygon2', 'Stantler', 'Smeargle', 'Tyrogue', 'Hitmontop', 'Smoochum', 'Elekid', 'Magby', 'Miltank', 'Blissey', 'Raikou', 'Entei', 'Suicune', 'Larvitar', 'Pupitar', 'Tyranitar', 'Lugia', 'Ho-Oh', 'Celebi', 'Treecko', 'Grovyle', 'Sceptile', 'Torchic', 'Combusken', 'Blaziken', 'Mudkip', 'Marshtomp', 'Swampert', 'Poochyena', 'Mightyena', 'Zigzagoon', 'Linoone', 'Wurmple', 'Silcoon', 'Beautifly', 'Cascoon', 'Dustox', 'Lotad', 'Lombre', 'Ludicolo', 'Seedot', 'Nuzleaf', 'Shiftry', 'Taillow', 'Swellow', 'Wingull', 'Pelipper', 'Ralts', 'Kirlia', 'Gardevoir', 'Surskit', 'Masquerain', 'Shroomish', 'Breloom', 'Slakoth', 'Vigoroth', 'Slaking', 'Nincada', 'Ninjask', 'Shedinja', 'Whismur', 'Loudred', 'Exploud', 'Makuhita', 'Hariyama', 'Azurill', 'Nosepass', 'Skitty', 'Delcatty', 'Sableye', 'Mawile', 'Aron', 'Lairon', 'Aggron', 'Meditite', 'Medicham', 'Electrike', 'Manectric', 'Plusle', 'Minun', 'Volbeat', 'Illumise', 'Roselia', 'Gulpin', 'Swalot', 'Carvanha', 'Sharpedo', 'Wailmer', 'Wailord', 'Numel', 'Camerupt', 'Torkoal', 'Spoink', 'Grumpig', 'Spinda', 'Trapinch', 'Vibrava', 'Flygon', 'Cacnea', 'Cacturne', 'Swablu', 'Altaria', 'Zangoose', 'Seviper', 'Lunatone', 'Solrock', 'Barboach', 'Whiscash', 'Corphish', 'Crawdaunt', 'Baltoy', 'Claydol', 'Lileep', 'Cradily', 'Anorith', 'Armaldo', 'Feebas', 'Milotic', 'Castform', 'Kecleon', 'Shuppet', 'Banette', 'Duskull', 'Dusclops', 'Tropius', 'Chimecho', 'Absol', 'Wynaut', 'Snorunt', 'Glalie', 'Spheal', 'Sealeo', 'Walrein', 'Clamperl', 'Huntail', 'Gorebyss', 'Relicanth', 'Luvdisc', 'Bagon', 'Shelgon', 'Salamence', 'Beldum', 'Metang', 'Metagross', 'Regirock', 'Regice', 'Registeel', 'Latias', 'Latios', 'Kyogre', 'Groudon', 'Rayquaza', 'Jirachi', 'Deoxys', 'Turtwig', 'Grotle', 'Torterra', 'Chimchar', 'Monferno', 'Infernape', 'Piplup', 'Prinplup', 'Empoleon', 'Starly', 'Staravia', 'Staraptor', 'Bidoof', 'Bibarel', 'Kricketot', 'Kricketune', 'Shinx', 'Luxio', 'Luxray', 'Budew', 'Roserade', 'Cranidos', 'Rampardos', 'Shieldon', 'Bastiodon', 'Burmy', 'Wormadam', 'Mothim', 'Combee', 'Vespiquen', 'Pachirisu', 'Buizel', 'Floatzel', 'Cherubi', 'Cherrim', 'Shellos', 'Gastrodon', 'Ambipom', 'Drifloon', 'Drifblim', 'Buneary', 'Lopunny', 'Mismagius', 'Honchkrow', 'Glameow', 'Purugly', 'Chingling', 'Stunky', 'Skuntank', 'Bronzor', 'Bronzong', 'Bonsly', 'Mime Jr.', 'Happiny', 'Chatot', 'Spiritomb', 'Gible', 'Gabite', 'Garchomp', 'Munchlax', 'Riolu', 'Lucario', 'Hippopotas', 'Hippowdon', 'Skorupi', 'Drapion', 'Croagunk', 'Toxicroak', 'Carnivine', 'Finneon', 'Lumineon', 'Mantyke', 'Snover', 'Abomasnow', 'Weavile', 'Magnezone', 'Lickilicky', 'Rhyperior', 'Tangrowth', 'Electivire', 'Magmortar', 'Togekiss', 'Yanmega', 'Leafeon', 'Glaceon', 'Gliscor', 'Mamoswine', 'Porygon-Z', 'Gallade', 'Probopass', 'Dusknoir', 'Froslass', 'Rotom', 'Uxie', 'Mesprit', 'Azelf', 'Dialga', 'Palkia', 'Heatran', 'Regigigas', 'Giratina', 'Cresselia', 'Phione', 'Manaphy', 'Darkrai', 'Shaymin', 'Arceus', 'Victini', 'Snivy', 'Servine', 'Serperior', 'Tepig', 'Pignite', 'Emboar', 'Oshawott', 'Dewott', 'Samurott', 'Patrat', 'Watchog', 'Lillipup', 'Herdier', 'Stoutland', 'Purrloin', 'Liepard', 'Pansage', 'Simisage', 'Pansear', 'Simisear', 'Panpour', 'Simipour', 'Munna', 'Musharna', 'Pidove', 'Tranquill', 'Unfezant', 'Blitzle', 'Zebstrika', 'Roggenrola', 'Boldore', 'Gigalith', 'Woobat', 'Swoobat', 'Drilbur', 'Excadrill', 'Audino', 'Timburr', 'Gurdurr', 'Conkeldurr', 'Tympole', 'Palpitoad', 'Seismitoad', 'Throh', 'Sawk', 'Sewaddle', 'Swadloon', 'Leavanny', 'Venipede', 'Whirlipede', 'Scolipede', 'Cottonee', 'Whimsicott', 'Petilil', 'Lilligant', 'Basculin', 'Sandile', 'Krokorok', 'Krookodile', 'Darumaka', 'Darmanitan', 'Maractus', 'Dwebble', 'Crustle', 'Scraggy', 'Scrafty', 'Sigilyph', 'Yamask', 'Cofagrigus', 'Tirtouga', 'Carracosta', 'Archen', 'Archeops', 'Trubbish', 'Garbodor', 'Zorua', 'Zoroark', 'Minccino', 'Cinccino', 'Gothita', 'Gothorita', 'Gothitelle', 'Solosis', 'Duosion', 'Reuniclus', 'Ducklett', 'Swanna', 'Vanillite', 'Vanillish', 'Vanilluxe', 'Deerling', 'Sawsbuck', 'Emolga', 'Karrablast', 'Escavalier', 'Foongus', 'Amoonguss', 'Frillish', 'Jellicent', 'Alomomola', 'Joltik', 'Galvantula', 'Ferroseed', 'Ferrothorn', 'Klink', 'Klang', 'Klinklang', 'Tynamo', 'Eelektrik', 'Eelektross', 'Elgyem', 'Beheeyem', 'Litwick', 'Lampent', 'Chandelure', 'Axew', 'Fraxure', 'Haxorus', 'Cubchoo', 'Beartic', 'Cryogonal', 'Shelmet', 'Accelgor', 'Stunfisk', 'Mienfoo', 'Mienshao', 'Druddigon', 'Golett', 'Golurk', 'Pawniard', 'Bisharp', 'Bouffalant', 'Rufflet', 'Braviary', 'Vullaby', 'Mandibuzz', 'Heatmor', 'Durant', 'Deino', 'Zweilous', 'Hydreigon', 'Larvesta', 'Volcarona', 'Cobalion', 'Terrakion', 'Virizion', 'Tornadus', 'Thundurus', 'Reshiram', 'Zekrom', 'Landorus', 'Kyurem', 'Keldeo', 'Meloetta', 'Genesect', 'Chespin', 'Quilladin', 'Chesnaught', 'Fennekin', 'Braixen', 'Delphox', 'Froakie', 'Frogadier', 'Greninja', 'Bunnelby', 'Diggersby', 'Fletchling', 'Fletchinder', 'Talonflame', 'Scatterbug', 'Spewpa', 'Vivillon', 'Litleo', 'Pyroar', 'FlabΘbΘ', 'Floette', 'Florges', 'Skiddo', 'Gogoat', 'Pancham', 'Pangoro', 'Furfrou', 'Espurr', 'Meowstic', 'Honedge', 'Doublade', 'Aegislash', 'Spritzee', 'Aromatisse', 'Swirlix', 'Slurpuff', 'Inkay', 'Malamar', 'Binacle', 'Barbaracle', 'Skrelp', 'Dragalge', 'Clauncher', 'Clawitzer', 'Helioptile', 'Heliolisk', 'Tyrunt', 'Tyrantrum', 'Amaura', 'Aurorus', 'Sylveon', 'Hawlucha', 'Dedenne', 'Carbink', 'Goomy', 'Sliggoo', 'Goodra', 'Klefki', 'Phantump', 'Trevenant', 'Pumpkaboo', 'Gourgeist', 'Bergmite', 'Avalugg', 'Noibat', 'Noivern', 'Xerneas', 'Yveltal', 'Zygarde', 'Diancie', 'Hoopa', 'Volcanion', 'Rowlet', 'Dartrix', 'Decidueye', 'Litten', 'Torracat', 'Incineroar', 'Popplio', 'Brionne', 'Primarina', 'Pikipek', 'Trumbeak', 'Toucannon', 'Yungoos', 'Gumshoos', 'Grubbin', 'Charjabug', 'Vikavolt', 'Crabrawler', 'Crabominable', 'Oricorio', 'Cutiefly', 'Ribombee', 'Rockruff', 'Lycanroc', 'Wishiwashi', 'Mareanie', 'Toxapex', 'Mudbray', 'Mudsdale', 'Dewpider', 'Araquanid', 'Fomantis', 'Lurantis', 'Morelull', 'Shiinotic', 'Salandit', 'Salazzle', 'Stufful', 'Bewear', 'Bounsweet', 'Steenee', 'Tsareena', 'Comfey', 'Oranguru', 'Passimian', 'Wimpod', 'Golisopod', 'Sandygast', 'Palossand', 'Pyukumuku', 'Type: Null', 'Silvally', 'Minior', 'Komala', 'Turtonator', 'Togedemaru', 'Mimikyu', 'Bruxish', 'Drampa', 'Dhelmise', 'Jangmo-o', 'Hakamo-o', 'Kommo-o', 'Tapu Koko', 'Tapu Lele', 'Tapu Bulu', 'Tapu Fini', 'Cosmog', 'Cosmoem', 'Solgaleo', 'Lunala', 'Nihilego', 'Buzzwole', 'Pheromosa', 'Xurkitree', 'Celesteela', 'Kartana', 'Guzzlord', 'Necrozma', 'Magearna', 'Marshadow', 'Poipole', 'Naganadel', 'Stakataka', 'Blacephalon', 'Zeraora', 'Meltan', 'Melmetal', 'Grookey', 'Thwackey', 'Rillaboom', 'Scorbunny', 'Raboot', 'Cinderace', 'Sobble', 'Drizzile', 'Inteleon', 'Skwovet', 'Greedent', 'Rookidee', 'Corvisquire', 'Corviknight', 'Blipbug', 'Dottler', 'Orbeetle', 'Nickit', 'Thievul', 'Gossifleur', 'Eldegoss', 'Wooloo', 'Dubwool', 'Chewtle', 'Drednaw', 'Yamper', 'Boltund', 'Rolycoly', 'Carkol', 'Coalossal', 'Applin', 'Flapple', 'Appletun', 'Silicobra', 'Sandaconda', 'Cramorant', 'Arrokuda', 'Barraskewda', 'Toxel', 'Toxtricity', 'Sizzlipede', 'Centiskorch', 'Clobbopus', 'Grapploct', 'Sinistea', 'Polteageist', 'Hatenna', 'Hattrem', 'Hatterene', 'Impidimp', 'Morgrem', 'Grimmsnarl', 'Obstagoon', 'Perrserker', 'Cursola', 'SirfetchÆd', 'Mr. Rime', 'Runerigus', 'Milcery', 'Alcremie', 'Falinks', 'Pincurchin', 'Snom', 'Frosmoth', 'Stonjourner', 'Eiscue', 'Indeedee', 'Morpeko', 'Cufant', 'Copperajah', 'Dracozolt', 'Arctozolt', 'Dracovish', 'Arctovish', 'Duraludon', 'Dreepy', 'Drakloak', 'Dragapult', 'Zacian', 'Zamazenta', 'Eternatus', 'Kubfu', 'Urshifu', 'Zarude', 'Regieleki', 'Regidrago', 'Glastrier', 'Spectrier', 'Calyrex')
FLAGS = ("Game Started", "Gotten Pokedex", "Been to Ecruteak", "Been to Cianwood", "Been to Olivine", "Been to Vermillion", "Beat Lance", "Power Plant Restored")
# (story flag needed, kanto needed, unknown additional check)
COMMERCIAL_DAT = ((0, False, 255), (0, False, 255), (0, False, 255), (0, False, 255), (0, False, 255), (0, False, 255), (0, False, 255), (0, False, 255), (0, False, 255), (0, False, 2), (0, False, 2), (1, False, 255), (1, False, 255), (1, False, 255), (1, False, 255), (2, False, 3), (2, False, 3), (2, False, 3), (2, False, 2), (2, False, 2), (2, False, 2), (3, False, 2), (3, False, 3), (4, False, 1), (4, False, 1), (4, False, 1), (4, False, 1), (4, False, 1), (4, False, 1), (5, False, 3), (6, True, 3), (6, True, 3), (6, True, 3), (6, True, 3), (6, True, 3), (7, False, 3))
COMMERICALS = ('Commercial: Always where you need it!\nYour local Pokémon Center!', 'Commercial: Full of smiling faces!\nYour cheerful Poké Mart!', 'Commercial: Your friend for adventure,\nyour Pokégear...Pokégear...Pokégear!\nYour Pokégear from Silph Co. Take our\nlatest model on your next adventure!', 'Commercial: Catch that Trainer’s eye for\nan intense battle! But don’t pick fights\nwith those who aren’t Trainers. This has\nbeen a message from the Pokémon League.', 'Commercial: Whenever you turn your head,\nthere it is. Your constant companion in\nlife’s journey. Your Pokémon is always\nthere to help. This has been a message\nfrom the Pokémon League.', 'Commercial: The gentle flow of time, an\nancient figure... The gentle vibrations\nof Sprout Tower in Violet City... \nIt’s waiting for you. This message\nbrought to you by the Johto Bureau\nof Tourism.', 'Commercial: An ancient message is being\ndiscovered, right now, in the Ruins of\nAlph! This message brought to you by the\nJohto Bureau of Tourism.', 'Commercial: A beautiful sound and\ngraceful dance, together at the\nEcruteak Dance Theater.\nThis message brought to you by the\nJohto Bureau of Tourism.', 'Commercial: The light of hope shines over\nan anxious boat trip to this port city’s\nlandmark! Come see the lighthouse!\nThis message brought to you by the\nJohto Bureau of Tourism.', 'Commercial: Gulp gulp! Yum! Aprijuice!\nAprijuice! Run and shake, make Aprijuice!\nGulp gulp! Drink it up! Aprijuice!\nEveryone loves Aprijuice! Just for\nPokémon! None for humans! Aprijuice!', 'Commercial: A polished design, a lively\nsilhouette. A cloud of dust rising up.\nRunning along with your Pokémon in your\nrunning shoes!', 'Commercial: A fateful encounter that\nbegins in the Pokémon Center...\nA connection between two people...\nIf you climb the stairs, you’ll find it.\nThe Union Room.', 'Commercial: A fateful encounter that\nbegins in the Pokémon Center...\nA connection between two people...\nIf you take the escalator down, you’ll\nfind it--the Wi-Fi Club.', 'Commercial: The symbol of Goldenrod City,\nthe Global Terminal! A place where you\ncan experience the world, where the\nworld can meet you, and the Global Trade\nStation where you can trade Pokémon.', 'Commercial: Come one, come all! Welcome!\nWelcome to the Wi-Fi Plaza, where\neveryone meets! Play games with others\nin the Wi-Fi Plaza! The wa...! Wi-Fi Plaza!', 'Commercial: If it’s Pokémon goods you\nwant, you can get anything here.\nFrom top to bottom, a wonderful world\nof shopping in the Goldenrod\nDepartment Store.', 'Commercial: Between battles, why not\ntake a break and relax at the Goldenrod\nGame Corner?', 'Commercial: Hey, all you radio listeners\nout there. This is the Johto Radio\nBroadcasting Network. We’re sending out\ndreams over our radio waves. La la la,\nthe Johto Radio Station!', 'Commercial: All right, all right, all right!\nDon’t you also want to be certain your\nPokémon is victorious? Let’s go to the\nPokéathlon! There are ten different\nevents for you to compete in!', 'Commercial: Da da da dum dum dum da da!\nFriendship!\nCooperation!\nTrust!\nBelief in the possibilities!\nThe dripping sweat is a sign of your\nhard work!\n...\nThe Pokéathlon anthem,\n“Believe in Pokémon!” On sale soon!', 'Commercial: Are you catching Bug-type\nPokémon? Well Tuesdays, Thursdays,\nand Saturdays of every week are\nBug-Catching Contest Days!\nThose of you who love Bug-type Pokémon,\ngather at the National Park every\nTuesday, Thursday, and Saturday!\nSee you there!', 'Commercial: Dum da da dum dum da da\ndum dum. Pa pa pa pa da dum pa pa pa pa\nda dum Pokémon! Catch as many Pokémon\nas you like until the Poké Balls run out\nat Warden Baoba’s Safari Zone...zone...', 'Commercial: Mahogany Town’s famous Rage\nCandy Bar! They work so hard every day\nto make these famous RageCandyBars!\nWhy not take one back home to your\nfriends--a RageCandyBar!', 'Commercial: Extraordinary Pokémon\nbattles, the kind you’ve always wished\nfor, are found only in the Battle Tower.\nTake part in the highest-grade battles.\nWill you take on the challenge by\nyourself or with a partner?', 'Commercial: Do you know the true face of\nthe Battle Tower? Opening every door on\nthe planet; every Trainer awaits you!\nHow far will you be able to go?', 'Commercial: A place where your beloved\nPokémon can become number one.\nThe battle of a lifetime in the\nBattle Hall! \nMake your Pokémon shine bright here;\nyou’re the only Trainer who can!', 'Commercial: Collect Castle Points!\nManage your Castle Points and use them\nbefore each battle in the Battle Castle!', 'Commercial: Luck is so fickle and selfish\nat the Battle Arcade! Just believe in\nyour Pokémon and go! Fight against fate\nin the Battle Arcade! Will the next step\nlead you closer to paradise, or\nto failure?', 'Commercial: Do you know the best\nbattle techniques to get Pokémon to\nshow off their true potential?\nThe Battle Factory! If you don’t know,\nyou won’t win! See you at the\nBattle Factory!', 'Commercial: We invite you to travel the\nlightning-fast trip between Olivine and\nVermilion Cities on a hydroplane-like\nboat ride!', 'Commercial: If you’d like to ride your\nBike around as much as you want\nunder the Kanto sky, why not try\nCycling Road?\nIt’s waiting for you on Route 17.', 'Commercial: The Pokémon League is\nwaiting for you, when you’re ready\nto challenge us. If you’re coming from\nKanto, we’re right at the end of\nRoute 22.\nThis message brought to you by the\nPokémon League.', 'Commercial: The man who restored a town\ndevastated by a volcanic eruption. That\nman was none other than Blaine! He may\nhave lost his Cinnabar Gym, but he’s been\nable to reopen it on Seafoam Islands!', 'Commercial: Hey all you radio listeners\nout there. This is the Kanto Radio\nBroadcasting Network. We’re sending out\ndreams over the radio waves. La la la,\nthe Kanto Radio Station!', 'Commercial: Silph Co. is a special\nhigh-tech innovation company dedicated\nto making people’s lives better and\nbringing about a wonderful future.', 'Commercial: From Goldenrod to Saffron\nCity, a surprising high-speed arrival and\na high-quality journey!\nRide the Magnet Train--the\ntransportation of the future!')
FIRST_COMMENTS = ('When you first see them', 'So many it’ll seem like a dream', 'There’s no reason for it, but', 'Only when you’re there', 'Whether you see them above or below,', 'If one walks with you as a companion', 'If you just try calling out its name', 'If you look at it from a different angle', 'It’ll resemble a teacher', 'You won’t be able to resist', 'Anytime', 'If you lightly poke it and see,', 'More than you expected')
SECOND_COMMENTS = ('you won’t be able to stop laughing!', 'you’ll feel totally at ease.', 'you’ll feel so hopeful.', 'you won’t be able to look away.', 'you’ll be held captive!', 'you’ll be able to make a great friend!', 'you’ll be admired by all!', 'it will never cease to amaze you!', 'you’ll be intensely appealing.', 'you’ll think it’s so wonderful...', 'you’ll be so cool.', 'you’ll feel so strange...', 'you’ll think that’s one typical Pokémon.')

def generate(seed, fly_flag, kanto_flag, is_hg, story_flags, commercial_value = None, count = 1):
    """Oak's channel prediction"""

    locs = tuple(
        i for i in range(540)
        if i in ENCOUNTER_ROUTES
          and i not in EXCL
          and (fly_flag or i not in FLY_EXCL)
          and (kanto_flag or i not in KANTO_ENCOUNTER_ROUTES)
    )
    encounter_dat = HG_ENCOUNTER_DAT if is_hg else SS_ENCOUNTER_DAT
    # i do not know what determines the value compared to commercial_datum[2]
    # if commercial_datum[2] is 0xFF, the comparison doesn't matter
    # otherwise, it checks for 0x1, 0x2, or 0x3
    # for now, if commercial_value is None, display all 3 possibilities
    pos_all = [[], [], [], []]
    for i, commercial_datum in enumerate(COMMERCIAL_DAT):
        if story_flags[commercial_datum[0]] \
        and (kanto_flag or not commercial_datum[1]):
            if commercial_datum[2] == 0xFF:
                for pos in pos_all:
                    pos.append(i)
            else:
                pos_all[commercial_datum[2]].append(i)
    rng = LCRNG.PokeRNG(seed)
    for _ in range(count):
        info = []
        seen_routes = []
        for _ in range(5):
            location = None
            while location is None or location in seen_routes:
                location = locs[rng.nextHigh() % len(locs)]
            seen_routes.append(location)
            # swarms do rng.next() % 1000 < 500, not implemented
            print(location)
            x = rng.nextHigh() % len(encounter_dat[location])
            print(x)
            species = encounter_dat[location][x]
            info.append((MAP_NAMES[LOC_TO_MAP[location]], SPECIES_NAMES[species]))
        increment = ((rng.nextHigh() % 3) + 1) * 2
        comment_info = []
        comment_rand_1 = rng.nextHigh() % 0xd
        comment_rand_2 = rng.nextHigh() % 0xd
        for _ in range(5):
            comment_info.append((FIRST_COMMENTS[comment_rand_1], SECOND_COMMENTS[comment_rand_2]))
            comment_rand_1 += increment
            comment_rand_1 %= 0xd
            comment_rand_2 += increment
            comment_rand_2 %= 0xd
        commercial_rand = rng.nextHigh()

        for route_and_pokemon, comments in zip(info, comment_info):
            route, pokemon = route_and_pokemon
            first_comment, second_comment = comments
            comment = first_comment + '\n' + second_comment
            print(f"{route=}")
            print(f"{pokemon=}")
            print(f"{comment=}")
            print()

        if commercial_value is None:
            for commercial_value in range(4):
                commercial = COMMERICALS[pos_all[commercial_value][commercial_rand % len(pos_all[commercial_value])]]
                length = pos_all[commercial_value][commercial_rand % len(pos_all[commercial_value])]
                mod = commercial_rand % len(pos_all[commercial_value])
                val = pos_all[commercial_value][commercial_rand % len(pos_all[commercial_value])]
                print(f"{commercial_value=} {commercial=} {length=} {mod=} {val=}")
        else:
            commercial = COMMERICALS[pos_all[commercial_value][commercial_rand % len(pos_all[commercial_value])]]
            print(f"{commercial=}")
        print()
        print()

if __name__ == "__main__":
    generate(0xC00B0212, False, False, False, (True, True, True, True, False, False, False, False), 0x1, count = 3)
